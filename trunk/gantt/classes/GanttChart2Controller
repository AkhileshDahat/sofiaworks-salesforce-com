public class GanttChart2Controller {
	private Date startDate, endDate;
	
	public GanttChartMetadata__c metadata {get;set;}
	public String[] types {get;set;}
	public Boolean displayControls {get; private set;}
	public Boolean resultsFound {get { return this.tasks.size() > 0;}}
	
	public GanttChartTask[] tasks {get; private set;}
	public List<SelectOption> typeOptions {
		get {
			List<SelectOption> opts = new List<SelectOption>();
			for (Schema.PicklistEntry ent : Schema.SObjectType.Project_Stage__c.fields.Stage_Type__c.getPicklistValues()) {
				opts.add(new SelectOption(ent.getValue(), ent.getValue()));
			}
			return opts;
		}
	}
	public String getStartDate() {
		return this.startDate.year() + '-' + this.startDate.month() + '-' + this.startDate.day() + ' 00:00:00';
	}
	public String getEndDate() {
		return this.endDate.year() + '-' + this.endDate.month() + '-' + this.endDate.day() + ' 00:00:00';
	}
	
	public GanttChart2Controller() {
		this.metaData = new GanttChartMetadata__c();
		this.metaData.Start_Date__c = System.today().addDays(-120);
		this.metaData.End_Date__c = System.today().addDays(25);
		this.types = GanttChart.ALL_TYPES;
		this.displayControls = true;
		this.refreshData();
	}
	
	private void refreshData() {
		this.tasks = new List<GanttChartTask>();
		this.startDate = null;
		this.endDate = null;
		for (Project_Stage__c stage : [Select Id, Name, Title__c, Target_Start__c, Target_End__c, Lead_Person__r.Name, Order__r.StageName, Project__r.Name2__c, Project__r.Account__r.Name, Lead_Person__r.color__c, Planned_Hours__c from Project_Stage__c where Target_Start__c >= :this.metaData.Start_Date__c and Target_End__c <= :this.metaData.End_Date__c and Stage_Type__c in :this.types and Status__c IN :GanttChart.STATUSES and Order__r.StageName NOT IN :GanttChart.EXCLUDED_STAGES Order By Project__r.Name, Target_Start__c]) {
			this.tasks.add(new GanttChartTask(stage.Id, stage.Title__c, stage.Target_Start__c, stage.Target_End__c, stage.Lead_Person__r.Name, stage.Lead_Person__r.color__c, stage.Order__r.StageName, stage.Project__r.Name2__c, stage.Project__r.Account__r.Name, stage.Planned_Hours__c));
			if (this.startDate == null || this.startDate > stage.Target_Start__c) {this.startDate = stage.Target_Start__c;}
			if (this.endDate == null || this.endDate < stage.Target_End__c) {this.endDate = stage.Target_End__c;}
		}
	}
		
	public PageReference refresh() {
		this.refreshData();
		return null;
	}
	
	static testmethod void testRefreshData() {
		GanttChart2Controller con = new GanttChart2Controller();
		for (GanttChartTask task : con.tasks) {
			if (GanttChart.SIGNED_STAGES.contains(task.orderStage)) {
				System.assert(task.signed);
			}
			else {System.assert(!task.signed);}
		}
	}
}